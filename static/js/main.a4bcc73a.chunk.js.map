{"version":3,"sources":["utils/base.js","machine/searchBox.js","context/main.js","components/SearchBoxTabs.js","components/Suggestion.js","components/SearchBox.js","components/SearchPage.js","reportWebVitals.js","index.js"],"names":["makeid","length","result","characters","charactersLength","i","charAt","Math","floor","random","cancel","actions","searchBoxState","initial","id","states","open","entry","on","GET_SUGGESTIONS","target","CHANGE_INPUT","TOGGLE_CLEAN","CHANGE_SEARCH_TYPE","CANCEL_SEARCH","DO_SEARCH","cond","idle","deboucing","fetching","invoke","src","onDone","onError","error","close","OPEN_SEARCH_BOX","SEARCH_TYPE","MALL","JAPAN","BOOK","initialContext","keyword","inputValue","searchType","suggestions","loading","RakutenMallMobileSearchbox","Machine","context","cleanSuggestion","assign","cleanInputValue","setKeyword","_","setInputValue","setSuggestions","e","data","setSearchType","setResult","setNoError","setError","initialInputValue","sendSearchEventAfterDelay","send","delay","cancelSearch","guards","withInputValue","Boolean","withKeyword","services","fetchSuggestion","Promise","reslove","setTimeout","push","MainContext","createContext","useMainContext","useContext","MainProvider","children","useMachine","devTools","state","openSearchBox","closeSearchBox","changeSearchType","type","changeInput","cleanInput","doSearch","Provider","value","SearchBoxTabs","matches","className","toPairs","map","key","tabName","isSameType","classes","onClick","Suggestion","isModalOpen","isIdleState","isEmpty","text","index","additionalText","substr","SearchBox","headerClasses","inputText","showCleanBtn","onChange","placeholder","SearchPage","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a4bcc73a.chunk.js","sourcesContent":["export const makeid = (length) => {\n  var result = ''\n  var characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789'\n  var charactersLength = characters.length\n  for (var i = 0; i < length; i++) {\n    result += characters.charAt(Math.floor(Math.random() * charactersLength))\n  }\n  return result\n}\n","import { assign, send, actions, Machine } from 'xstate'\nimport { makeid } from 'utils/base'\nimport { random } from 'lodash'\n\nconst { cancel } = actions\n\nconst DELAY_TIME = 800\n\nconst fetchSuggestion = ({ inputValue }, { keyword }) => {\n  return new Promise((reslove) => {\n    setTimeout(() => {\n      let result = []\n      for (let i = 0; i < 10; i++) {\n        result.push(`${inputValue}${makeid(random(3, 10))}`)\n      }\n      reslove(result)\n    }, DELAY_TIME)\n  })\n}\n\nconst suggestionState = {\n  initial: 'idle',\n  on: {\n    GET_SUGGESTIONS: { target: '.fetching' },\n    CHANGE_INPUT: { target: '.deboucing', actions: 'setInputValue' },\n    TOGGLE_CLEAN: { actions: ['cleanSuggestion', 'cleanInputValue'] },\n    CHANGE_SEARCH_TYPE: { actions: 'setSearchType' },\n    CANCEL_SEARCH: { target: 'close' },\n    DO_SEARCH: { cond: 'withInputValue', target: 'close', actions: ['setKeyword'] },\n  },\n  states: {\n    idle: {},\n    deboucing: {\n      entry: ['cancelSearch', 'sendSearchEventAfterDelay'],\n    },\n    fetching: {\n      entry: 'setNoError',\n      invoke: {\n        id: 'fetch-suggestion',\n        src: 'fetchSuggestion',\n        onDone: [\n          { cond: 'withInputValue', target: 'idle', actions: 'setSuggestions' },\n          { target: 'idle' },\n        ],\n        onError: { target: 'error', actions: ['setError', 'cleanSuggestion'] },\n      },\n    },\n    error: {},\n  },\n}\n\nconst searchBoxState = {\n  initial: 'close',\n  id: 'search-box-modal',\n  states: {\n    open: {\n      entry: ['initialInputValue', 'cleanSuggestion'],\n      ...suggestionState,\n    },\n    close: {\n      on: {\n        OPEN_SEARCH_BOX: [{ cond: 'withKeyword', target: 'open.fetching' }, { target: 'open.idle' }],\n      },\n    },\n  },\n}\n\nexport const SEARCH_TYPE = {\n  MALL: '全站',\n  JAPAN: '日本購物/旅遊',\n  BOOK: '書籍/電子書',\n}\n\nconst initialContext = {\n  keyword: '',\n  inputValue: '',\n  result: '',\n  searchType: SEARCH_TYPE.MALL,\n  suggestions: [],\n  loading: false,\n  error: null,\n}\n\nexport const RakutenMallMobileSearchbox = Machine(\n  {\n    id: 'RakutenMallMobileSearchbox',\n    context: initialContext,\n    ...searchBoxState,\n  },\n  {\n    actions: {\n      // clean actions\n      cleanSuggestion: assign({ suggestions: [] }),\n      cleanInputValue: assign({ inputValue: '' }),\n\n      // set actions\n      setKeyword: assign({ keyword: (_, { keyword }) => keyword || '' }),\n      setInputValue: assign({ inputValue: (_, { keyword }) => keyword }),\n      setSuggestions: assign({ suggestions: (_, e) => e?.data ?? [] }),\n      setSearchType: assign({ searchType: (_, { searchType }) => searchType }),\n      setResult: assign({ result: (_, { result }) => result }),\n      setNoError: assign({ error: null }),\n      setError: assign({ error: (_, e) => e.data || true }),\n\n      initialInputValue: assign({ inputValue: ({ keyword }) => keyword }),\n\n      // deboucing actions\n      sendSearchEventAfterDelay: send('GET_SUGGESTIONS', {\n        delay: DELAY_TIME,\n        id: 'debounced-search',\n      }),\n      cancelSearch: cancel('debounced-search'),\n    },\n    guards: {\n      withInputValue: ({ inputValue }) => Boolean(inputValue),\n      withKeyword: ({ keyword }) => Boolean(keyword),\n    },\n    services: {\n      fetchSuggestion: fetchSuggestion,\n    },\n  }\n)\n","import { createContext, useContext } from 'react'\nimport { useMachine } from '@xstate/react'\nimport { RakutenMallMobileSearchbox } from 'machine/searchBox'\nimport { isDevMode } from 'constants/base'\n\nconst MainContext = createContext()\n\nexport const useMainContext = () => useContext(MainContext)\n\nconst MainProvider = ({ children }) => {\n  const [state, send] = useMachine(\n    RakutenMallMobileSearchbox,\n    // To enable chrome debug extension\n    { devTools: true }\n  )\n\n  // For Debug\n  if (isDevMode) {\n    console.log('🚀Machine state')\n    console.log(state)\n    console.log(state.context)\n  }\n\n  const actions = {\n    openSearchBox: () => send('OPEN_SEARCH_BOX'),\n    closeSearchBox: () => send('CANCEL_SEARCH'),\n    changeSearchType: (searchType) => send({ type: 'CHANGE_SEARCH_TYPE', searchType }),\n    changeInput: (keyword = '') => send({ type: 'CHANGE_INPUT', keyword }),\n    cleanInput: () => send('TOGGLE_CLEAN'),\n    doSearch: (keyword = '') => send({ type: 'DO_SEARCH', keyword }),\n  }\n\n  const getMainContext = () => {\n    return {\n      state,\n      send,\n      context: state.context,\n      actions,\n    }\n  }\n\n  return <MainContext.Provider value={getMainContext()}>{children}</MainContext.Provider>\n}\n\nexport default MainProvider\n","import React from 'react'\nimport { useMainContext } from 'context/main'\nimport { SEARCH_TYPE } from 'machine/searchBox'\nimport { toPairs } from 'lodash'\n\nconst SearchBoxTabs = () => {\n  const {\n    state,\n    context: { searchType },\n    actions: { changeSearchType },\n  } = useMainContext()\n  const isModalOpen = state.matches('open')\n\n  if (!isModalOpen) return null\n\n  return (\n    <div className=\"search-page__search-tabs\">\n      {toPairs(SEARCH_TYPE).map(([key, tabName]) => {\n        const isSameType = searchType === tabName\n        const handleClick = () => !isSameType && changeSearchType(SEARCH_TYPE[key])\n        const classes = isSameType\n          ? 'search-page__search-tabs__tab search-page__search-tabs__tab--active'\n          : 'search-page__search-tabs__tab'\n\n        return (\n          <div key={key} className={classes} onClick={handleClick}>\n            {tabName}\n          </div>\n        )\n      })}\n    </div>\n  )\n}\n\nexport default SearchBoxTabs\n","import React from 'react'\nimport { useMainContext } from 'context/main'\nimport { isEmpty } from 'lodash'\n\nconst Suggestion = () => {\n  const {\n    state,\n    context: { suggestions, inputValue },\n    actions: { doSearch },\n  } = useMainContext()\n  const isModalOpen = state.matches('open')\n  const isIdleState = state.matches('open.idle')\n\n  if (!isModalOpen) return null\n\n  return (\n    <div className=\"search-page__suggestion-wrapper\">\n      <div className=\"search-page__suggestion-wrapper__row\">\n        <b>{inputValue}</b>\n      </div>\n      {!isEmpty(suggestions) &&\n        isIdleState &&\n        suggestions.map((text, index) => {\n          const handleClick = () => doSearch(text)\n          const additionalText = text.substr(inputValue.length)\n          return (\n            <div key={index} className=\"search-page__suggestion-wrapper__row\" onClick={handleClick}>\n              <b>{inputValue}</b>\n              {additionalText}\n            </div>\n          )\n        })}\n    </div>\n  )\n}\n\nexport default Suggestion\n","import React from 'react'\nimport { useMainContext } from 'context/main'\nimport { isEmpty } from 'lodash'\n\nimport SearchBoxTabs from './SearchBoxTabs'\nimport Suggestion from './Suggestion'\n\nconst SearchBox = () => {\n  const {\n    state,\n    context: { keyword, inputValue },\n    actions: { openSearchBox, closeSearchBox, changeInput, cleanInput, doSearch },\n  } = useMainContext()\n\n  const isModalOpen = state.matches('open')\n\n  const handleInputClick = () => {\n    if (!isModalOpen) {\n      openSearchBox()\n    }\n  }\n\n  const handleSearchBtnClick = () => {\n    if (!isModalOpen) {\n      openSearchBox()\n    } else {\n      doSearch(inputValue)\n    }\n  }\n\n  const headerClasses = isModalOpen\n    ? 'search-page__search-box search-page__search-box--open'\n    : 'search-page__search-box'\n\n  const inputText = isModalOpen ? inputValue : keyword\n  const handleInputChange = (e) => changeInput(e.target.value)\n\n  const showCleanBtn = isModalOpen && !isEmpty(inputValue)\n\n  return (\n    <div className={headerClasses}>\n      <div className=\"search-page__input-row\">\n        <input\n          onClick={handleInputClick}\n          onChange={handleInputChange}\n          value={inputText}\n          className=\"search-page__input-row__input\"\n          placeholder=\"keywords...\"\n        />\n        {showCleanBtn && (\n          <div onClick={cleanInput} className=\"search-page__input-row__clean\">\n            X\n          </div>\n        )}\n        <div\n          onClick={handleSearchBtnClick}\n          className=\"search-page__input-row__button search-page__input-row__button--search\"\n        >\n          Search\n        </div>\n        {isModalOpen && (\n          <div className=\"search-page__input-row__button\" onClick={closeSearchBox}>\n            Cancel\n          </div>\n        )}\n      </div>\n      <SearchBoxTabs />\n      <Suggestion />\n    </div>\n  )\n}\n\nexport default SearchBox\n","import React from 'react'\nimport { useMainContext } from 'context/main'\n\nimport SearchBox from './SearchBox'\n\nconst SearchPage = () => {\n  const {\n    context: { keyword, searchType },\n  } = useMainContext()\n\n  return (\n    <div className=\"search-page\">\n      <div className=\"search-page__title\">Search Page</div>\n      <SearchBox />\n      <div className=\"search-page__content\">\n        <div>搜尋種類：{searchType}</div>\n        <div>搜尋結果：{keyword}</div>\n      </div>\n    </div>\n  )\n}\n\nexport default SearchPage\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport SearchPage from './components/SearchPage'\nimport 'styles/index.scss'\nimport MainProvider from 'context/main'\nimport reportWebVitals from './reportWebVitals'\n\nReactDOM.render(\n  <React.StrictMode>\n    <MainProvider>\n      <SearchPage />\n    </MainProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}