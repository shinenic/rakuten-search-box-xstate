{"version":3,"sources":["utils/base.js","machine/searchBox.js","context/main.js","components/SearchBoxTabs.js","components/Suggestion.js","components/SearchBox.js","components/SearchPage.js","reportWebVitals.js","index.js"],"names":["makeid","length","result","characters","charactersLength","i","charAt","Math","floor","random","suggestionState","initial","on","GET_SUGGESTIONS","target","TOGGLE_DEBOUCING_INPUT","internal","TOGGLE_CLEAN","actions","CHANGE_SEARCH_MODE","CANCEL_SEARCH","DO_SEARCH","cond","states","idle","deboucingInput","entry","after","fetching","invoke","id","src","onDone","onError","error","searchBoxState","open","exit","close","OPEN_SEARCH_BOX","SEARCH_MODE","MALL","JAPAN","BOOK","initialContext","keyword","filter","mode","inputValue","searchMode","suggestions","loading","suggestionError","RakutenMallMobileSearchbox","Machine","context","cleanSuggestion","assign","cleanInputValue","cleanSuggestionError","setKeyword","_","setFilter","newFilter","setInputValue","setSuggestions","e","data","setSearchMode","setResult","setSuggestionError","resetInputValue","resetSearchMode","guards","withInputValue","Boolean","withKeyword","services","fetchSuggestion","Promise","reslove","setTimeout","push","MainContext","createContext","useMainContext","useContext","MainProvider","children","useMachine","devTools","state","send","openSearchBox","closeSearchBox","changeSearchMode","type","toggleDeboucingInput","cleanInput","doSearch","Provider","value","SearchBoxTabs","matches","className","toPairs","map","key","tabName","isSameType","classes","onClick","Suggestion","handleClick","text","index","additionalText","substr","SearchBox","isModalOpen","headerClasses","inputText","showCleanBtn","isEmpty","onChange","placeholder","SearchPage","searchModeName","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oQAAaA,EAAS,SAACC,GAIrB,IAHA,IAAIC,EAAS,GACTC,EAAa,iEACbC,EAAmBD,EAAWF,OACzBI,EAAI,EAAGA,EAAIJ,EAAQI,IAC1BH,GAAUC,EAAWG,OAAOC,KAAKC,MAAMD,KAAKE,SAAWL,IAEzD,OAAOF,G,QCWHQ,EAAkB,CACtBC,QAAS,OACTC,GAAI,CACFC,gBAAiB,CAAEC,OAAQ,aAC3BC,uBAAwB,CAAED,OAAQ,kBAAmBE,UAAU,GAC/DC,aAAc,CAAEC,QAAS,CAAC,kBAAmB,oBAC7CC,mBAAoB,CAAED,QAAS,iBAC/BE,cAAe,CAAEN,OAAQ,SACzBO,UAAW,CAAEC,KAAM,iBAAkBR,OAAQ,QAASI,QAAS,CAAC,aAAc,eAEhFK,OAAQ,CACNC,KAAM,GACNC,eAAgB,CACdC,MAAO,gBACPC,MAAM,eA5BO,IA6BG,aAGlBC,SAAU,CACRF,MAAO,uBACPG,OAAQ,CACNC,GAAI,mBACJC,IAAK,kBACLC,OAAQ,CACN,CAAEV,KAAM,iBAAkBR,OAAQ,OAAQI,QAAS,kBACnD,CAAEJ,OAAQ,SAEZmB,QAAS,CAAEnB,OAAQ,QAASI,QAAS,CAAC,yBAG1CgB,MAAO,KAILC,EAAiB,CACrBxB,QAAS,QACTmB,GAAI,mBACJP,OAAQ,CACNa,KAAK,aACHV,MAAO,CAAC,kBAAmB,mBAC3BW,KAAM,mBACH3B,GAEL4B,MAAO,CACL1B,GAAI,CACF2B,gBAAiB,CAAC,CAAEjB,KAAM,cAAeR,OAAQ,iBAAmB,CAAEA,OAAQ,kBAMzE0B,EAAc,CACzBC,KAAM,eACNC,MAAO,wCACPC,KAAM,mCAGFC,EAAiB,CACrBC,QAAS,GACTC,OAAQ,CACNC,KAAM,IAERC,WAAY,GACZ9C,OAAQ,GACR+C,WAAYT,EAAYC,KACxBS,YAAa,GACbC,SAAS,EACTC,gBAAiB,MAGNC,EAA6BC,YAAQ,aAE9CxB,GAAI,6BACJyB,QAASX,GACNT,GAEL,CACEjB,QAAS,CAEPsC,gBAAiBC,YAAO,CAAEP,YAAa,KACvCQ,gBAAiBD,YAAO,CAAET,WAAY,KACtCW,qBAAsBF,YAAO,CAAEL,gBAAiB,OAGhDQ,WAAYH,YAAO,CAAEZ,QAAS,SAACgB,EAAD,YAAMhB,SAAyB,MAC7DiB,UAAWL,YAAO,CAAEX,OAAQ,kBAAGA,EAAH,EAAGA,OAAH,IAAeiB,iBAAf,MAA2B,GAA3B,qBAAC,eAAyCjB,GAAWiB,MACjFC,cAAeP,YAAO,CAAET,WAAY,SAACa,EAAD,YAAMhB,WAC1CoB,eAAgBR,YAAO,CAAEP,YAAa,SAACW,EAAGK,GAAJ,8BAAUA,QAAV,IAAUA,OAAV,EAAUA,EAAGC,YAAb,QAAqB,MAC3DC,cAAeX,YAAO,CAAER,WAAY,SAACY,EAAD,YAAMZ,cAC1CoB,UAAWZ,YAAO,CAAEvD,OAAQ,SAAC2D,EAAD,YAAM3D,UAClCoE,mBAAoBb,YAAO,CAAEL,gBAAiB,SAACS,EAAGK,GAAJ,cAAUA,QAAV,IAAUA,OAAV,EAAUA,EAAGC,QAG3DI,gBAAiBd,YAAO,CAAET,WAAY,qBAAGH,WACzC2B,gBAAiBf,YAAO,CAAER,WAAYT,EAAYC,QAEpDgC,OAAQ,CACNC,eAAgB,gBAAG1B,EAAH,EAAGA,WAAH,OAAoB2B,QAAQ3B,IAC5C4B,YAAa,gBAAG/B,EAAH,EAAGA,QAAH,OAAiB8B,QAAQ9B,KAExCgC,SAAU,CACRC,gBAjHkB,SAAC,EAAD,GAAkC,IAA/B9B,EAA8B,EAA9BA,WAA8B,EAAdH,QACzC,OAAO,IAAIkC,SAAQ,SAACC,GAClBC,YAAW,WAET,IADA,IAAI/E,EAAS,GACJG,EAAI,EAAGA,EAAI,GAAIA,IACtBH,EAAOgF,KAAP,UAAelC,GAAf,OAA4BhD,EAAOS,iBAAO,EAAG,OAE/CuE,EAAQ9E,KATK,YCCbiF,EAAcC,0BAEPC,EAAiB,kBAAMC,qBAAWH,IAwChCI,EAtCM,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAAe,EACfC,YACpBpC,EAEA,CAAEqC,UAAU,IAJuB,mBAC9BC,EAD8B,KACvBC,EADuB,SAc7B3C,EAAe0C,EAAMpC,QAArBN,WAEF/B,EAAU,CACd2E,cAAe,kBAAMD,EAAK,oBAC1BE,eAAgB,kBAAMF,EAAK,kBAC3BG,iBAAkB,SAAC9C,GAAD,OAAgB2C,EAAK,CAAEI,KAAM,qBAAsB/C,gBACrEgD,qBAAsB,eAACpD,EAAD,uDAAW,GAAX,OAAkB+C,EAAK,CAAEI,KAAM,yBAA0BnD,aAC/EqD,WAAY,kBAAMN,EAAK,iBACvBO,SAAU,eAACtD,EAAD,uDAAW,GAAIkB,EAAf,uDAA2B,CAAEhB,KAAME,GAAnC,OACR2C,EAAK,CAAEI,KAAM,YAAanD,UAASkB,gBAYvC,OAAO,cAACoB,EAAYiB,SAAb,CAAsBC,MARpB,CACLV,QACAC,OACArC,QAASoC,EAAMpC,QACfrC,WAIG,SAAgDsE,KCV1Cc,EA7BO,WAAO,IAAD,EAKtBjB,IAHFM,EAFwB,EAExBA,MACW1C,EAHa,EAGxBM,QAAWN,WACA8C,EAJa,EAIxB7E,QAAW6E,iBAIb,OAFoBJ,EAAMY,QAAQ,QAKhC,qBAAKC,UAAU,2BAAf,SACGC,kBAAQjE,GAAakE,KAAI,YAAqB,IAAD,mBAAlBC,EAAkB,KAAbC,EAAa,KACtCC,EAAa5D,IAAe2D,EAE5BE,EAAUD,EACZ,sEACA,gCAEJ,OACE,qBAAeL,UAAWM,EAASC,QANjB,kBAAOF,GAAcd,EAAiBvD,EAAYmE,KAMpE,SACGC,GADOD,QAZO,MCoBZK,EA9BI,WAAO,IAAD,EAKnB3B,IAHFM,EAFqB,EAErBA,MAFqB,IAGrBpC,QAHqB,IAGVL,mBAHU,MAGI,GAHJ,EAGQF,EAHR,EAGQA,WAClBmD,EAJU,EAIrBjF,QAAWiF,SAIb,IAFoBR,EAAMY,QAAQ,QAEhB,OAAO,KAEzB,IAAMU,EAAc,SAACC,GAAD,OAAU,kBAAMf,EAASe,KAE7C,OACE,sBAAKV,UAAU,kCAAf,UACE,qBAAKA,UAAU,uCAAuCO,QAASE,EAAYjE,GAA3E,SACE,4BAAIA,MAELE,EAAYwD,KAAI,SAACQ,EAAMC,GACtB,IAAMC,EAAiBF,EAAKG,OAAOrE,EAAW/C,QAC9C,OACE,sBAAiBuG,UAAU,uCAAuCO,QAASE,EAAYC,GAAvF,UACE,4BAAIlE,IACHoE,IAFOD,UCoDLG,EApEG,WAAO,IAAD,EAKlBjC,IAHFM,EAFoB,EAEpBA,MAFoB,IAGpBpC,QAAWV,EAHS,EAGTA,QAASG,EAHA,EAGAA,WAHA,IAIpB9B,QAAW2E,EAJS,EAITA,cAAeC,EAJN,EAIMA,eAAgBG,EAJtB,EAIsBA,qBAAsBC,EAJ5C,EAI4CA,WAAYC,EAJxD,EAIwDA,SAGxEoB,EAAc5B,EAAMY,QAAQ,QAgB5BiB,EAAgBD,EAClB,wDACA,0BAEEE,EAAYF,EAAcvE,EAAaH,EAMvC6E,EAAeH,IAAgBI,kBAAQ3E,GAE7C,OACE,sBAAKwD,UAAWgB,EAAhB,UACE,sBAAKhB,UAAU,yBAAf,UACE,uBACEO,QA9BiB,WAClBQ,GACH1B,KA6BI+B,SAXkB,SAAC1D,GACzB+B,EAAqB/B,EAAEpD,OAAOuF,QAWxBA,MAAOoB,EACPjB,UAAU,gCACVqB,YAAY,gBAEbH,GACC,qBAAKX,QAASb,EAAYM,UAAU,gCAApC,eAIF,qBACEO,QApCqB,WACtBQ,EAGHpB,EAASnD,GAFT6C,KAmCIW,UAAU,wEAFZ,oBAMCe,GACC,qBAAKf,UAAU,iCAAiCO,QAASjB,EAAzD,uBAKJ,cAAC,EAAD,IACA,cAAC,EAAD,QC9CSgC,EAnBI,WAAO,IAAD,IAGnBzC,IADF9B,QAAWV,EAFU,EAEVA,QAASC,EAFC,EAEDA,OAGhBiF,EAAc,iBAAGjF,QAAH,IAAGA,OAAH,EAAGA,EAAQC,YAAX,QAAmB,GAEvC,OACE,sBAAKyD,UAAU,cAAf,UACE,qBAAKA,UAAU,qBAAf,yBACA,cAAC,EAAD,IACA,sBAAKA,UAAU,uBAAf,UACE,iEAAWuB,KACX,iEAAWlF,YCNJmF,G,MAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,QCAdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,UACE,cAAC,EAAD,QAGJC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.b43bb9b4.chunk.js","sourcesContent":["export const makeid = (length) => {\n  var result = ''\n  var characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789'\n  var charactersLength = characters.length\n  for (var i = 0; i < length; i++) {\n    result += characters.charAt(Math.floor(Math.random() * charactersLength))\n  }\n  return result\n}\n","import { assign, Machine } from 'xstate'\nimport { makeid } from 'utils/base'\nimport { random } from 'lodash'\n\nconst DELAY_TIME = 1000\n\nconst fetchSuggestion = ({ inputValue }, { keyword }) => {\n  return new Promise((reslove) => {\n    setTimeout(() => {\n      let result = []\n      for (let i = 0; i < 10; i++) {\n        result.push(`${inputValue}${makeid(random(3, 10))}`)\n      }\n      reslove(result)\n    }, DELAY_TIME)\n  })\n}\n\nconst suggestionState = {\n  initial: 'idle',\n  on: {\n    GET_SUGGESTIONS: { target: '.fetching' },\n    TOGGLE_DEBOUCING_INPUT: { target: '.deboucingInput', internal: false },\n    TOGGLE_CLEAN: { actions: ['cleanSuggestion', 'cleanInputValue'] },\n    CHANGE_SEARCH_MODE: { actions: 'setSearchMode' },\n    CANCEL_SEARCH: { target: 'close' },\n    DO_SEARCH: { cond: 'withInputValue', target: 'close', actions: ['setKeyword', 'setFilter'] },\n  },\n  states: {\n    idle: {},\n    deboucingInput: {\n      entry: 'setInputValue',\n      after: {\n        [DELAY_TIME]: 'fetching',\n      },\n    },\n    fetching: {\n      entry: 'cleanSuggestionError',\n      invoke: {\n        id: 'fetch-suggestion',\n        src: 'fetchSuggestion',\n        onDone: [\n          { cond: 'withInputValue', target: 'idle', actions: 'setSuggestions' },\n          { target: 'idle' },\n        ],\n        onError: { target: 'error', actions: ['setSuggestionError'] },\n      },\n    },\n    error: {},\n  },\n}\n\nconst searchBoxState = {\n  initial: 'close',\n  id: 'search-box-modal',\n  states: {\n    open: {\n      entry: ['resetInputValue', 'resetSearchMode'],\n      exit: 'cleanSuggestion',\n      ...suggestionState,\n    },\n    close: {\n      on: {\n        OPEN_SEARCH_BOX: [{ cond: 'withKeyword', target: 'open.fetching' }, { target: 'open.idle' }],\n      },\n    },\n  },\n}\n\nexport const SEARCH_MODE = {\n  MALL: '全站',\n  JAPAN: '日本購物/旅遊',\n  BOOK: '書籍/電子書',\n}\n\nconst initialContext = {\n  keyword: '',\n  filter: {\n    mode: '',\n  },\n  inputValue: '',\n  result: '',\n  searchMode: SEARCH_MODE.MALL,\n  suggestions: [],\n  loading: false,\n  suggestionError: null,\n}\n\nexport const RakutenMallMobileSearchbox = Machine(\n  {\n    id: 'RakutenMallMobileSearchbox',\n    context: initialContext,\n    ...searchBoxState,\n  },\n  {\n    actions: {\n      // clean actions\n      cleanSuggestion: assign({ suggestions: [] }),\n      cleanInputValue: assign({ inputValue: '' }),\n      cleanSuggestionError: assign({ suggestionError: null }),\n\n      // set actions\n      setKeyword: assign({ keyword: (_, { keyword }) => keyword || '' }),\n      setFilter: assign({ filter: ({ filter }, { newFilter = {} }) => ({ ...filter, ...newFilter }) }),\n      setInputValue: assign({ inputValue: (_, { keyword }) => keyword }),\n      setSuggestions: assign({ suggestions: (_, e) => e?.data ?? [] }),\n      setSearchMode: assign({ searchMode: (_, { searchMode }) => searchMode }),\n      setResult: assign({ result: (_, { result }) => result }),\n      setSuggestionError: assign({ suggestionError: (_, e) => e?.data }),\n\n      // reset actions\n      resetInputValue: assign({ inputValue: ({ keyword }) => keyword }),\n      resetSearchMode: assign({ searchMode: SEARCH_MODE.MALL }),\n    },\n    guards: {\n      withInputValue: ({ inputValue }) => Boolean(inputValue),\n      withKeyword: ({ keyword }) => Boolean(keyword),\n    },\n    services: {\n      fetchSuggestion: fetchSuggestion,\n    },\n  }\n)\n","import { createContext, useContext } from 'react'\nimport { useMachine } from '@xstate/react'\nimport { RakutenMallMobileSearchbox } from 'machine/searchBox'\nimport { isDevMode } from 'constants/base'\n\nconst MainContext = createContext()\n\nexport const useMainContext = () => useContext(MainContext)\n\nconst MainProvider = ({ children }) => {\n  const [state, send] = useMachine(\n    RakutenMallMobileSearchbox,\n    // To enable chrome debug extension\n    { devTools: true }\n  )\n\n  // For Debug\n  if (isDevMode) {\n    console.log('🚀Machine state')\n    console.log(state)\n    console.log(state.context)\n  }\n\n  const { searchMode } = state.context\n\n  const actions = {\n    openSearchBox: () => send('OPEN_SEARCH_BOX'),\n    closeSearchBox: () => send('CANCEL_SEARCH'),\n    changeSearchMode: (searchMode) => send({ type: 'CHANGE_SEARCH_MODE', searchMode }),\n    toggleDeboucingInput: (keyword = '') => send({ type: 'TOGGLE_DEBOUCING_INPUT', keyword }),\n    cleanInput: () => send('TOGGLE_CLEAN'),\n    doSearch: (keyword = '', newFilter = { mode: searchMode }) =>\n      send({ type: 'DO_SEARCH', keyword, newFilter }),\n  }\n\n  const getMainContext = () => {\n    return {\n      state,\n      send,\n      context: state.context,\n      actions,\n    }\n  }\n\n  return <MainContext.Provider value={getMainContext()}>{children}</MainContext.Provider>\n}\n\nexport default MainProvider\n","import React from 'react'\nimport { useMainContext } from 'context/main'\nimport { SEARCH_MODE } from 'machine/searchBox'\nimport { toPairs } from 'lodash'\n\nconst SearchBoxTabs = () => {\n  const {\n    state,\n    context: { searchMode },\n    actions: { changeSearchMode },\n  } = useMainContext()\n  const isModalOpen = state.matches('open')\n\n  if (!isModalOpen) return null\n\n  return (\n    <div className=\"search-page__search-tabs\">\n      {toPairs(SEARCH_MODE).map(([key, tabName]) => {\n        const isSameType = searchMode === tabName\n        const handleClick = () => !isSameType && changeSearchMode(SEARCH_MODE[key])\n        const classes = isSameType\n          ? 'search-page__search-tabs__tab search-page__search-tabs__tab--active'\n          : 'search-page__search-tabs__tab'\n\n        return (\n          <div key={key} className={classes} onClick={handleClick}>\n            {tabName}\n          </div>\n        )\n      })}\n    </div>\n  )\n}\n\nexport default SearchBoxTabs\n","import React from 'react'\nimport { useMainContext } from 'context/main'\n\nconst Suggestion = () => {\n  const {\n    state,\n    context: { suggestions = [], inputValue },\n    actions: { doSearch },\n  } = useMainContext()\n  const isModalOpen = state.matches('open')\n\n  if (!isModalOpen) return null\n\n  const handleClick = (text) => () => doSearch(text)\n\n  return (\n    <div className=\"search-page__suggestion-wrapper\">\n      <div className=\"search-page__suggestion-wrapper__row\" onClick={handleClick(inputValue)}>\n        <b>{inputValue}</b>\n      </div>\n      {suggestions.map((text, index) => {\n        const additionalText = text.substr(inputValue.length)\n        return (\n          <div key={index} className=\"search-page__suggestion-wrapper__row\" onClick={handleClick(text)}>\n            <b>{inputValue}</b>\n            {additionalText}\n          </div>\n        )\n      })}\n    </div>\n  )\n}\n\nexport default Suggestion\n","import React from 'react'\nimport { useMainContext } from 'context/main'\nimport { isEmpty } from 'lodash'\n\nimport SearchBoxTabs from './SearchBoxTabs'\nimport Suggestion from './Suggestion'\n\nconst SearchBox = () => {\n  const {\n    state,\n    context: { keyword, inputValue },\n    actions: { openSearchBox, closeSearchBox, toggleDeboucingInput, cleanInput, doSearch },\n  } = useMainContext()\n\n  const isModalOpen = state.matches('open')\n\n  const handleInputClick = () => {\n    if (!isModalOpen) {\n      openSearchBox()\n    }\n  }\n\n  const handleSearchBtnClick = () => {\n    if (!isModalOpen) {\n      openSearchBox()\n    } else {\n      doSearch(inputValue)\n    }\n  }\n\n  const headerClasses = isModalOpen\n    ? 'search-page__search-box search-page__search-box--open'\n    : 'search-page__search-box'\n\n  const inputText = isModalOpen ? inputValue : keyword\n\n  const handleInputChange = (e) => {\n    toggleDeboucingInput(e.target.value)\n  }\n\n  const showCleanBtn = isModalOpen && !isEmpty(inputValue)\n\n  return (\n    <div className={headerClasses}>\n      <div className=\"search-page__input-row\">\n        <input\n          onClick={handleInputClick}\n          onChange={handleInputChange}\n          value={inputText}\n          className=\"search-page__input-row__input\"\n          placeholder=\"keywords...\"\n        />\n        {showCleanBtn && (\n          <div onClick={cleanInput} className=\"search-page__input-row__clean\">\n            X\n          </div>\n        )}\n        <div\n          onClick={handleSearchBtnClick}\n          className=\"search-page__input-row__button search-page__input-row__button--search\"\n        >\n          Search\n        </div>\n        {isModalOpen && (\n          <div className=\"search-page__input-row__button\" onClick={closeSearchBox}>\n            Cancel\n          </div>\n        )}\n      </div>\n      <SearchBoxTabs />\n      <Suggestion />\n    </div>\n  )\n}\n\nexport default SearchBox\n","import React from 'react'\nimport { useMainContext } from 'context/main'\n\nimport SearchBox from './SearchBox'\n\nconst SearchPage = () => {\n  const {\n    context: { keyword, filter },\n  } = useMainContext()\n\n  const searchModeName = filter?.mode ?? ''\n\n  return (\n    <div className=\"search-page\">\n      <div className=\"search-page__title\">Search Page</div>\n      <SearchBox />\n      <div className=\"search-page__content\">\n        <div>搜尋模式：{searchModeName}</div>\n        <div>搜尋結果：{keyword}</div>\n      </div>\n    </div>\n  )\n}\n\nexport default SearchPage\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport SearchPage from './components/SearchPage'\nimport 'styles/index.scss'\nimport MainProvider from 'context/main'\nimport reportWebVitals from './reportWebVitals'\n\nReactDOM.render(\n  <React.StrictMode>\n    <MainProvider>\n      <SearchPage />\n    </MainProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}